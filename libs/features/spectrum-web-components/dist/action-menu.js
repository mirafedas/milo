/* eslint-disable */
/* Generated by Milo */

import{html as n}from"./base.js";import{state as y}from"./base.js";import{ifDefined as c}from"./base.js";import{property as p}from"./base.js";import{DESCRIPTION_ID as v,PickerBase as g}from"./picker.js";import"./action-button.js";import{ObserveSlotPresence as $}from"./shared.js";import{ObserveSlotText as x}from"./shared.js";import"./icons-workflow.js";import{css as h}from"./base.js";var m=h`
    :host{display:inline-flex}:host([quiet]){min-width:0}:host>sp-menu{display:none}::slotted([slot=icon]){flex-shrink:0}.icon{flex-shrink:0}#popover{max-width:none}:host([dir=ltr]) ::slotted([slot=icon]),:host([dir=ltr]) .icon{margin-left:calc(-1*(var(--spectrum-actionbutton-textonly-padding-left-adjusted) - var(--spectrum-actionbutton-padding-left-adjusted)))}:host([dir=rtl]) ::slotted([slot=icon]),:host([dir=rtl]) .icon{margin-right:calc(-1*(var(--spectrum-actionbutton-textonly-padding-left-adjusted) - var(--spectrum-actionbutton-padding-left-adjusted)))}:host([dir]) slot[icon-only]::slotted([slot=icon]),:host([dir]) slot[icon-only] .icon{margin-inline:calc(( var(--custom-actionbutton-edge-to-text,var(--spectrum-actionbutton-edge-to-text)) - var(--custom-actionbutton-edge-to-visual-only,var(--spectrum-actionbutton-edge-to-visual-only)))*-1)}sp-overlay:not(:defined){display:none}
`,u=m;import{SlottableRequestEvent as O}from"./overlay.js";var b=Object.defineProperty,f=Object.getOwnPropertyDescriptor,i=(r,t,l,s)=>{for(var o=s>1?void 0:s?f(t,l):t,a=r.length-1,d;a>=0;a--)(d=r[a])&&(o=(s?d(t,l,o):d(o))||o);return s&&o&&b(t,l,o),o},e=class extends $(x(g,"label"),'[slot="label-only"]'){constructor(){super(...arguments),this.selects=void 0,this.static=void 0,this.listRole="menu",this.itemRole="menuitem",this.handleSlottableRequest=t=>{this.dispatchEvent(new O(t.name,t.data))}}static get styles(){return[u]}get hasLabel(){return this.slotHasContent}get labelOnly(){return this.slotContentIsPresent}get buttonContent(){return[n`
                ${this.labelOnly?n``:n`
                          <slot
                              name="icon"
                              slot="icon"
                              ?icon-only=${!this.hasLabel}
                              ?hidden=${this.labelOnly}
                          >
                              <sp-icon-more class="icon"></sp-icon-more>
                          </slot>
                      `}
                <slot name="label" ?hidden=${!this.hasLabel}></slot>
                <slot name="label-only"></slot>
                <slot
                    name="tooltip"
                    @slotchange=${this.handleTooltipSlotchange}
                ></slot>
            `]}render(){return this.tooltipEl&&(this.tooltipEl.disabled=this.open),n`
            <sp-action-button
                aria-describedby=${v}
                ?quiet=${this.quiet}
                ?selected=${this.open}
                static-color=${c(this.staticColor)}
                aria-haspopup="true"
                aria-controls=${c(this.open?"menu":void 0)}
                aria-expanded=${this.open?"true":"false"}
                aria-label=${c(this.label||void 0)}
                id="button"
                class="button"
                size=${this.size}
                @blur=${this.handleButtonBlur}
                @focus=${this.handleButtonFocus}
                @keydown=${{handleEvent:this.handleEnterKeydown,capture:!0}}
                ?disabled=${this.disabled}
            >
                ${this.buttonContent}
            </sp-action-button>
            ${this.renderMenu} ${this.renderDescriptionSlot}
        `}update(t){t.has("invalid")&&(this.invalid=!1),super.update(t)}};i([p({type:String})],e.prototype,"selects",2),i([p({type:String,reflect:!0})],e.prototype,"static",2),i([p({reflect:!0,attribute:"static-color"})],e.prototype,"staticColor",2),i([y()],e.prototype,"labelOnly",1);import{defineElement as S}from"./base.js";S("sp-action-menu",e);
